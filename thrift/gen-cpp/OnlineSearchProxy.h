/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef OnlineSearchProxy_H
#define OnlineSearchProxy_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "OnlineSearch_types.h"

namespace OnlineSearch { namespace Interface {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class OnlineSearchProxyIf {
 public:
  virtual ~OnlineSearchProxyIf() {}
  virtual void onSearchStatusChanged(const SearchId search_id, const SearchStatus::type search_status) = 0;
  virtual void onSearchResultChanged(const SearchId search_id, const std::vector<SearchResult> & results) = 0;
};

class OnlineSearchProxyIfFactory {
 public:
  typedef OnlineSearchProxyIf Handler;

  virtual ~OnlineSearchProxyIfFactory() {}

  virtual OnlineSearchProxyIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(OnlineSearchProxyIf* /* handler */) = 0;
  };

class OnlineSearchProxyIfSingletonFactory : virtual public OnlineSearchProxyIfFactory {
 public:
  OnlineSearchProxyIfSingletonFactory(const ::std::shared_ptr<OnlineSearchProxyIf>& iface) : iface_(iface) {}
  virtual ~OnlineSearchProxyIfSingletonFactory() {}

  virtual OnlineSearchProxyIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(OnlineSearchProxyIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<OnlineSearchProxyIf> iface_;
};

class OnlineSearchProxyNull : virtual public OnlineSearchProxyIf {
 public:
  virtual ~OnlineSearchProxyNull() {}
  void onSearchStatusChanged(const SearchId /* search_id */, const SearchStatus::type /* search_status */) override {
    return;
  }
  void onSearchResultChanged(const SearchId /* search_id */, const std::vector<SearchResult> & /* results */) override {
    return;
  }
};

typedef struct _OnlineSearchProxy_onSearchStatusChanged_args__isset {
  _OnlineSearchProxy_onSearchStatusChanged_args__isset() : search_id(false), search_status(false) {}
  bool search_id :1;
  bool search_status :1;
} _OnlineSearchProxy_onSearchStatusChanged_args__isset;

class OnlineSearchProxy_onSearchStatusChanged_args {
 public:

  OnlineSearchProxy_onSearchStatusChanged_args(const OnlineSearchProxy_onSearchStatusChanged_args&) noexcept;
  OnlineSearchProxy_onSearchStatusChanged_args& operator=(const OnlineSearchProxy_onSearchStatusChanged_args&) noexcept;
  OnlineSearchProxy_onSearchStatusChanged_args() noexcept
                                               : search_id(0),
                                                 search_status(static_cast<SearchStatus::type>(0)) {
  }

  virtual ~OnlineSearchProxy_onSearchStatusChanged_args() noexcept;
  SearchId search_id;
  /**
   * 
   * @see SearchStatus
   */
  SearchStatus::type search_status;

  _OnlineSearchProxy_onSearchStatusChanged_args__isset __isset;

  void __set_search_id(const SearchId val);

  void __set_search_status(const SearchStatus::type val);

  bool operator == (const OnlineSearchProxy_onSearchStatusChanged_args & rhs) const
  {
    if (!(search_id == rhs.search_id))
      return false;
    if (!(search_status == rhs.search_status))
      return false;
    return true;
  }
  bool operator != (const OnlineSearchProxy_onSearchStatusChanged_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OnlineSearchProxy_onSearchStatusChanged_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OnlineSearchProxy_onSearchStatusChanged_pargs {
 public:


  virtual ~OnlineSearchProxy_onSearchStatusChanged_pargs() noexcept;
  const SearchId* search_id;
  /**
   * 
   * @see SearchStatus
   */
  const SearchStatus::type* search_status;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OnlineSearchProxy_onSearchStatusChanged_result {
 public:

  OnlineSearchProxy_onSearchStatusChanged_result(const OnlineSearchProxy_onSearchStatusChanged_result&) noexcept;
  OnlineSearchProxy_onSearchStatusChanged_result& operator=(const OnlineSearchProxy_onSearchStatusChanged_result&) noexcept;
  OnlineSearchProxy_onSearchStatusChanged_result() noexcept {
  }

  virtual ~OnlineSearchProxy_onSearchStatusChanged_result() noexcept;

  bool operator == (const OnlineSearchProxy_onSearchStatusChanged_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const OnlineSearchProxy_onSearchStatusChanged_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OnlineSearchProxy_onSearchStatusChanged_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OnlineSearchProxy_onSearchStatusChanged_presult {
 public:


  virtual ~OnlineSearchProxy_onSearchStatusChanged_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OnlineSearchProxy_onSearchResultChanged_args__isset {
  _OnlineSearchProxy_onSearchResultChanged_args__isset() : search_id(false), results(false) {}
  bool search_id :1;
  bool results :1;
} _OnlineSearchProxy_onSearchResultChanged_args__isset;

class OnlineSearchProxy_onSearchResultChanged_args {
 public:

  OnlineSearchProxy_onSearchResultChanged_args(const OnlineSearchProxy_onSearchResultChanged_args&);
  OnlineSearchProxy_onSearchResultChanged_args& operator=(const OnlineSearchProxy_onSearchResultChanged_args&);
  OnlineSearchProxy_onSearchResultChanged_args() noexcept
                                               : search_id(0) {
  }

  virtual ~OnlineSearchProxy_onSearchResultChanged_args() noexcept;
  SearchId search_id;
  std::vector<SearchResult>  results;

  _OnlineSearchProxy_onSearchResultChanged_args__isset __isset;

  void __set_search_id(const SearchId val);

  void __set_results(const std::vector<SearchResult> & val);

  bool operator == (const OnlineSearchProxy_onSearchResultChanged_args & rhs) const
  {
    if (!(search_id == rhs.search_id))
      return false;
    if (!(results == rhs.results))
      return false;
    return true;
  }
  bool operator != (const OnlineSearchProxy_onSearchResultChanged_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OnlineSearchProxy_onSearchResultChanged_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OnlineSearchProxy_onSearchResultChanged_pargs {
 public:


  virtual ~OnlineSearchProxy_onSearchResultChanged_pargs() noexcept;
  const SearchId* search_id;
  const std::vector<SearchResult> * results;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OnlineSearchProxy_onSearchResultChanged_result {
 public:

  OnlineSearchProxy_onSearchResultChanged_result(const OnlineSearchProxy_onSearchResultChanged_result&) noexcept;
  OnlineSearchProxy_onSearchResultChanged_result& operator=(const OnlineSearchProxy_onSearchResultChanged_result&) noexcept;
  OnlineSearchProxy_onSearchResultChanged_result() noexcept {
  }

  virtual ~OnlineSearchProxy_onSearchResultChanged_result() noexcept;

  bool operator == (const OnlineSearchProxy_onSearchResultChanged_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const OnlineSearchProxy_onSearchResultChanged_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OnlineSearchProxy_onSearchResultChanged_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OnlineSearchProxy_onSearchResultChanged_presult {
 public:


  virtual ~OnlineSearchProxy_onSearchResultChanged_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class OnlineSearchProxyClient : virtual public OnlineSearchProxyIf {
 public:
  OnlineSearchProxyClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  OnlineSearchProxyClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void onSearchStatusChanged(const SearchId search_id, const SearchStatus::type search_status) override;
  void send_onSearchStatusChanged(const SearchId search_id, const SearchStatus::type search_status);
  void recv_onSearchStatusChanged();
  void onSearchResultChanged(const SearchId search_id, const std::vector<SearchResult> & results) override;
  void send_onSearchResultChanged(const SearchId search_id, const std::vector<SearchResult> & results);
  void recv_onSearchResultChanged();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class OnlineSearchProxyProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<OnlineSearchProxyIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (OnlineSearchProxyProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_onSearchStatusChanged(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_onSearchResultChanged(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  OnlineSearchProxyProcessor(::std::shared_ptr<OnlineSearchProxyIf> iface) :
    iface_(iface) {
    processMap_["onSearchStatusChanged"] = &OnlineSearchProxyProcessor::process_onSearchStatusChanged;
    processMap_["onSearchResultChanged"] = &OnlineSearchProxyProcessor::process_onSearchResultChanged;
  }

  virtual ~OnlineSearchProxyProcessor() {}
};

class OnlineSearchProxyProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  OnlineSearchProxyProcessorFactory(const ::std::shared_ptr< OnlineSearchProxyIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< OnlineSearchProxyIfFactory > handlerFactory_;
};

class OnlineSearchProxyMultiface : virtual public OnlineSearchProxyIf {
 public:
  OnlineSearchProxyMultiface(std::vector<std::shared_ptr<OnlineSearchProxyIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~OnlineSearchProxyMultiface() {}
 protected:
  std::vector<std::shared_ptr<OnlineSearchProxyIf> > ifaces_;
  OnlineSearchProxyMultiface() {}
  void add(::std::shared_ptr<OnlineSearchProxyIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void onSearchStatusChanged(const SearchId search_id, const SearchStatus::type search_status) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->onSearchStatusChanged(search_id, search_status);
    }
    ifaces_[i]->onSearchStatusChanged(search_id, search_status);
  }

  void onSearchResultChanged(const SearchId search_id, const std::vector<SearchResult> & results) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->onSearchResultChanged(search_id, results);
    }
    ifaces_[i]->onSearchResultChanged(search_id, results);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class OnlineSearchProxyConcurrentClient : virtual public OnlineSearchProxyIf {
 public:
  OnlineSearchProxyConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  OnlineSearchProxyConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void onSearchStatusChanged(const SearchId search_id, const SearchStatus::type search_status) override;
  int32_t send_onSearchStatusChanged(const SearchId search_id, const SearchStatus::type search_status);
  void recv_onSearchStatusChanged(const int32_t seqid);
  void onSearchResultChanged(const SearchId search_id, const std::vector<SearchResult> & results) override;
  int32_t send_onSearchResultChanged(const SearchId search_id, const std::vector<SearchResult> & results);
  void recv_onSearchResultChanged(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}} // namespace

#endif
