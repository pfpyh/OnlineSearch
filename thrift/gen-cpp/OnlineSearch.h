/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef OnlineSearch_H
#define OnlineSearch_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "OnlineSearch_types.h"

namespace OnlineSearch { namespace Interface {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class OnlineSearchIf {
 public:
  virtual ~OnlineSearchIf() {}
  virtual bool connect() = 0;
  virtual SearchId search(const std::string& input) = 0;
};

class OnlineSearchIfFactory {
 public:
  typedef OnlineSearchIf Handler;

  virtual ~OnlineSearchIfFactory() {}

  virtual OnlineSearchIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(OnlineSearchIf* /* handler */) = 0;
  };

class OnlineSearchIfSingletonFactory : virtual public OnlineSearchIfFactory {
 public:
  OnlineSearchIfSingletonFactory(const ::std::shared_ptr<OnlineSearchIf>& iface) : iface_(iface) {}
  virtual ~OnlineSearchIfSingletonFactory() {}

  virtual OnlineSearchIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(OnlineSearchIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<OnlineSearchIf> iface_;
};

class OnlineSearchNull : virtual public OnlineSearchIf {
 public:
  virtual ~OnlineSearchNull() {}
  bool connect() override {
    bool _return = false;
    return _return;
  }
  SearchId search(const std::string& /* input */) override {
    SearchId _return = 0;
    return _return;
  }
};


class OnlineSearch_connect_args {
 public:

  OnlineSearch_connect_args(const OnlineSearch_connect_args&) noexcept;
  OnlineSearch_connect_args& operator=(const OnlineSearch_connect_args&) noexcept;
  OnlineSearch_connect_args() noexcept {
  }

  virtual ~OnlineSearch_connect_args() noexcept;

  bool operator == (const OnlineSearch_connect_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const OnlineSearch_connect_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OnlineSearch_connect_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OnlineSearch_connect_pargs {
 public:


  virtual ~OnlineSearch_connect_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OnlineSearch_connect_result__isset {
  _OnlineSearch_connect_result__isset() : success(false) {}
  bool success :1;
} _OnlineSearch_connect_result__isset;

class OnlineSearch_connect_result {
 public:

  OnlineSearch_connect_result(const OnlineSearch_connect_result&) noexcept;
  OnlineSearch_connect_result& operator=(const OnlineSearch_connect_result&) noexcept;
  OnlineSearch_connect_result() noexcept
                              : success(0) {
  }

  virtual ~OnlineSearch_connect_result() noexcept;
  bool success;

  _OnlineSearch_connect_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const OnlineSearch_connect_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const OnlineSearch_connect_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OnlineSearch_connect_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OnlineSearch_connect_presult__isset {
  _OnlineSearch_connect_presult__isset() : success(false) {}
  bool success :1;
} _OnlineSearch_connect_presult__isset;

class OnlineSearch_connect_presult {
 public:


  virtual ~OnlineSearch_connect_presult() noexcept;
  bool* success;

  _OnlineSearch_connect_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _OnlineSearch_search_args__isset {
  _OnlineSearch_search_args__isset() : input(false) {}
  bool input :1;
} _OnlineSearch_search_args__isset;

class OnlineSearch_search_args {
 public:

  OnlineSearch_search_args(const OnlineSearch_search_args&);
  OnlineSearch_search_args& operator=(const OnlineSearch_search_args&);
  OnlineSearch_search_args() noexcept
                           : input() {
  }

  virtual ~OnlineSearch_search_args() noexcept;
  std::string input;

  _OnlineSearch_search_args__isset __isset;

  void __set_input(const std::string& val);

  bool operator == (const OnlineSearch_search_args & rhs) const
  {
    if (!(input == rhs.input))
      return false;
    return true;
  }
  bool operator != (const OnlineSearch_search_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OnlineSearch_search_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class OnlineSearch_search_pargs {
 public:


  virtual ~OnlineSearch_search_pargs() noexcept;
  const std::string* input;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OnlineSearch_search_result__isset {
  _OnlineSearch_search_result__isset() : success(false) {}
  bool success :1;
} _OnlineSearch_search_result__isset;

class OnlineSearch_search_result {
 public:

  OnlineSearch_search_result(const OnlineSearch_search_result&) noexcept;
  OnlineSearch_search_result& operator=(const OnlineSearch_search_result&) noexcept;
  OnlineSearch_search_result() noexcept
                             : success(0) {
  }

  virtual ~OnlineSearch_search_result() noexcept;
  SearchId success;

  _OnlineSearch_search_result__isset __isset;

  void __set_success(const SearchId val);

  bool operator == (const OnlineSearch_search_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const OnlineSearch_search_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OnlineSearch_search_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _OnlineSearch_search_presult__isset {
  _OnlineSearch_search_presult__isset() : success(false) {}
  bool success :1;
} _OnlineSearch_search_presult__isset;

class OnlineSearch_search_presult {
 public:


  virtual ~OnlineSearch_search_presult() noexcept;
  SearchId* success;

  _OnlineSearch_search_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class OnlineSearchClient : virtual public OnlineSearchIf {
 public:
  OnlineSearchClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  OnlineSearchClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool connect() override;
  void send_connect();
  bool recv_connect();
  SearchId search(const std::string& input) override;
  void send_search(const std::string& input);
  SearchId recv_search();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class OnlineSearchProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<OnlineSearchIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (OnlineSearchProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_connect(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_search(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  OnlineSearchProcessor(::std::shared_ptr<OnlineSearchIf> iface) :
    iface_(iface) {
    processMap_["connect"] = &OnlineSearchProcessor::process_connect;
    processMap_["search"] = &OnlineSearchProcessor::process_search;
  }

  virtual ~OnlineSearchProcessor() {}
};

class OnlineSearchProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  OnlineSearchProcessorFactory(const ::std::shared_ptr< OnlineSearchIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< OnlineSearchIfFactory > handlerFactory_;
};

class OnlineSearchMultiface : virtual public OnlineSearchIf {
 public:
  OnlineSearchMultiface(std::vector<std::shared_ptr<OnlineSearchIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~OnlineSearchMultiface() {}
 protected:
  std::vector<std::shared_ptr<OnlineSearchIf> > ifaces_;
  OnlineSearchMultiface() {}
  void add(::std::shared_ptr<OnlineSearchIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool connect() override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->connect();
    }
    return ifaces_[i]->connect();
  }

  SearchId search(const std::string& input) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->search(input);
    }
    return ifaces_[i]->search(input);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class OnlineSearchConcurrentClient : virtual public OnlineSearchIf {
 public:
  OnlineSearchConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  OnlineSearchConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool connect() override;
  int32_t send_connect();
  bool recv_connect(const int32_t seqid);
  SearchId search(const std::string& input) override;
  int32_t send_search(const std::string& input);
  SearchId recv_search(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}} // namespace

#endif
